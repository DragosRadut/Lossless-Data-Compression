# ---LZ77 Encoding---




def write_to_file (output) :
	# define mapping on bits
	offset_bits = 11
	length_bits = 5
	offset_length_bytes = 2
	
	bytes_output = bytearray()
	for value in output : 
		[(offset, length, char)] = value
		offset_length_value = (offset << length_bits) + length
		for count in range(offset_length_bytes) :
			bytes_output.append((offset_length_value >> (8 * (offset_length_bytes - 1 - count))) & (0b11111111))
		#if char is not None :
			#if offset == 0 :
		bytes_output.append(ord(char))
	
	print(bytes_output)
	out_file = open('output.bin', "wb")
	out_file.write(bytes_output)
	out_file.close()

# input to string
with open('input.txt') as f:
	input_data = f.read()


def LZ77_search(search, look_ahead):
	ls = len(search)
	llh = len(look_ahead)
 
	if(ls==0):
		return (0,0, look_ahead[0])
	 
	if(llh)==0:
		return (-1,-1,"")

	best_length=0
	best_offset=0 
	buf = search + look_ahead

	search_pointer = ls	
	for i in range(0,ls):
		length = 0
		while buf[i + length] == buf[search_pointer + length]:
			length = length + 1
			if search_pointer + length == len(buf):
				length = length - 1
				break
			if i+length >= search_pointer:
				break	 
		if length > best_length:
			best_offset = i
			best_length = length
	return (best_offset, best_length, buf[search_pointer+best_length])


search_id = 0
forward_id = 0
max_search_len = 1024
output = []

while forward_id < len(input_data):
	search_data = input_data[search_id : forward_id]
	forward_data = input_data[forward_id : forward_id + max_search_len]
	(offset, length, char) = LZ77_search(search_data, forward_data)
	
	output.append([(offset, length, char)])

	forward_id = forward_id + length + 1
	search_id = forward_id - max_search_len

	if search_id < 0:
		search_id = 0

#print(output)
write_to_file(output)
#compressed = []
#compressed += (to_bytes(output[i]))


			
